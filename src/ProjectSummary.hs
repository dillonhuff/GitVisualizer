module ProjectSummary(projectSummary,
                      writeProjectSummaryHtml) where

import Control.Monad as M
import Data.List as L
import System.Directory
import Text.Blaze.Html5 as H

import Report
import Utils

data ProjectSummary
  = ProjectSummary String [Report]

projectSummary n rs = ProjectSummary n rs

projectSummaryHtml :: ProjectSummary -> Html
projectSummaryHtml (ProjectSummary name reps) =
  docTypeHtml $ do
      H.head $ do
        H.title $ toHtml (name ++ " Git Report")
      body $ do
        blurb
        stringListToHyperLinkList "Reports" $ L.map reportName reps

writeProjectSummaryHtml :: ProjectSummary -> IO ()
writeProjectSummaryHtml ps@(ProjectSummary projName reps) =
  let summaryHtml = projectSummaryHtml ps in
  do
    topDirName <- createReportDirs projName
    writeHtmlToFile (topDirName ++ "/" ++ projName ++ "_git_report_") summaryHtml
    mapM_ (writeReportHtml topDirName) reps

blurb :: Html
blurb = toHtml "This report was automatically generated by GitVisualizer, a code analysis tool written by Dillon Huff"

reportTitle :: String -> Html
reportTitle projectName = H.title $ toHtml $ projectName ++ " Git Report"

createReportDirs :: String -> IO String
createReportDirs projName =
  do
    let topDirNamePre = (topLevelDirName projName) in
      do
        dtStr <- dateTimeString
        let topDirName = topDirNamePre ++ dtStr in
          do
            createDirectoryIfMissing True $ topDirName
            createDirectoryIfMissing True $ chartsDirName topDirName
            return topDirName

topLevelDirName :: String -> String
topLevelDirName projName = projName ++ "_git_report_"

chartsDirName filePath = filePath ++ "/charts"
