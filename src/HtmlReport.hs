module HtmlReport(generateHtmlReport) where

import Control.Monad (forM_)
import Data.List as L
import Text.Blaze.Html5 as H
import Text.Blaze.Html5.Attributes as A
import Text.Blaze.Html.Renderer.String

import Analysis

generateHtmlReport :: ProjectReport -> IO ()
generateHtmlReport projRep =
  let reportHtml = docTypeHtml $ do
        H.head $ do
          (reportTitle $ projectName projRep)
        body $ do
          blurb
          mostModifiedList $ L.take 10 $ L.reverse $ modCountsToList $ projectFileModCounts projRep in
  writeHtmlToFile ((projectName projRep) ++ "_git_report") reportHtml

basicImage :: String -> String -> Html
basicImage imgPath imgAltTagText =
  img ! src (toValue imgPath) ! alt (toValue imgAltTagText)

reportTitle :: String -> Html
reportTitle projectName = H.title $ toHtml $ projectName ++ " Git Report"

blurb :: Html
blurb = toHtml "This report was automatically generated by GitVisualizer, a git analysis tool written by Dillon Huff"

mostModifiedList :: [(String, Int)] -> Html
mostModifiedList mostModifiedFiles = body $ do
  p $ toHtml "Most modified files and the number of commits that modified them"
  ul $ forM_ mostModifiedFiles (li . toHtml . modStr)

modStr :: (String, Int) -> String
modStr (name, num) = name ++ ", " ++ show num

writeHtmlToFile :: FilePath -> Html -> IO ()
writeHtmlToFile fileName htmlText =
  writeFile (fileName ++ ".html") (renderHtml htmlText)
