module HtmlReport(generateHtmlReport) where

import Control.Monad (forM_)
import Data.List as L
import Data.Map as M hiding ((!))
import Text.Blaze.Html5 as H
import Text.Blaze.Html5.Attributes as A
import Text.Blaze.Html.Renderer.String

import Analysis
import Plot

generateHtmlReport :: ProjectReport -> IO ()
generateHtmlReport projRep = do
  generateModificationChart (projectName projRep) (modCountsToList $ projectFileModCounts projRep)
  writeHtmlToFile ((projectName projRep) ++ "_git_report") (reportHtml projRep)

generateModificationChart :: String -> [(String, Int)] -> IO ()
generateModificationChart chartName modCountsByFile =
  let modCountsByInd = L.zip [1..((length modCountsByFile) - 1)] $ L.map snd modCountsByFile in
  plotModificationData chartName modCountsByInd

reportHtml :: ProjectReport -> Html
reportHtml projRep =
    let reportHtml = docTypeHtml $ do
        H.head $ do
          (reportTitle $ projectName projRep)
        body $ do
          blurb
          basicImage (projectName projRep ++ ".svg") "auto generated alt"
          mostModifiedList $ L.take 10 $ L.reverse $ modCountsToList $ projectFileModCounts projRep in
    reportHtml

basicImage :: String -> String -> Html
basicImage imgPath imgAltTagText =
  img ! src (toValue imgPath) ! alt (toValue imgAltTagText)

reportTitle :: String -> Html
reportTitle projectName = H.title $ toHtml $ projectName ++ " Git Report"

blurb :: Html
blurb = toHtml "This report was automatically generated by GitVisualizer, a code analysis tool written by Dillon Huff"

mostModifiedList :: [(String, Int)] -> Html
mostModifiedList mostModifiedFiles = body $ do
  p $ toHtml "The most modified files and the number of commits that modified them are shown below:"
  ul $ forM_ mostModifiedFiles (li . toHtml . modStr)

modStr :: (String, Int) -> String
modStr (name, num) = name ++ ", " ++ show num

writeHtmlToFile :: FilePath -> Html -> IO ()
writeHtmlToFile fileName htmlText =
  writeFile (fileName ++ ".html") (renderHtml htmlText)
